2-2 Correctness of bubblesort
Bubblesort is a popular, but inefficient, sorting algorithm. It works by repeatedly swapping adjacent elements that are out of order.

BUBBLESORT(A)
	for i = 1 to A.length - 1
		for j = A.length downto i + 1
			if A[j] < A[j - 1]
				exchange A[j] with A[j - 1]

a. Let A' denote the output of BUBBLESORT(A). To prove that BUBBLESORT is correct, we need to prove that it terminates and that A'[1] <= A'[2] <= ... <= A'[n],
where n = A.length. In order to show that BUBBLESORT actually sorts, what else do we need to prove?

The next two parts will prove the inequality from part (a).

b. State precisely a loop invariant for the for loop in lines 2 - 4, and prove that this loop invariant holds. Your proof should use the structure of the loop invariant proof presented in this chapter.

c. Using the termination condition of the loop invariant proced in part (b), state a loop invariant for the for loop in lines 1 - 4 that will allow you to prove the inequality from part (a). Your proof should use the structure of the loop invariant proof presented in this chapter.

d. What is the worst-case running time of bubblesort? How does it compare to the running time of insertion sort?
